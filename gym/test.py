import matplotlib.pyplot as plt
import numpy as np
import math

from analyse import plot_compare, validate_reward
import analyse
import benchdata

def analyse_test():
    result, ep_r = benchdata.exp4_benchmark_data()
    
    result, ep_r = benchdata.success_1_data()

    result, ep_r = [30026272.0, 30477272.0, 24157576.0, 26832272.0, 27385728.0, 27097464.0, 22180208.0, 25383744.0, 26893584.0, 22242160.0, 20239496.0, 20267936.0, 19809072.0, 19451208.0, 21915136.0, 19836912.0, 27677544.0, 29947920.0, 26419928.0, 26639024.0, 23019392.0, 19879768.0, 21735824.0, 22758712.0, 45134424.0, 21585728.0, 18505344.0, 22265488.0, 22823736.0, 27844504.0, 27678944.0, 19289480.0, 25343160.0, 32259368.0, 24271344.0, 28136696.0, 25394384.0, 25431480.0, 23274664.0, 30220472.0, 26047192.0, 30967136.0, 28284520.0, 21619040.0, 22292784.0, 25315712.0, 27575384.0, 29426816.0, 25604296.0, 23796088.0, 30185248.0, 28192912.0, 26649128.0, 28999544.0, 23233664.0, 32211984.0, 26543336.0, 30636104.0, 29296944.0, 29897680.0, 26791208.0, 31642200.0, 38935424.0, 30783448.0, 28284616.0, 47943568.0, 31309968.0, 31020840.0, 30590976.0, 37013968.0, 38777112.0, 30116240.0, 33320360.0, 39544112.0, 47579184.0, 42008120.0, 30616520.0, 32777704.0, 36674096.0, 30420168.0, 41639424.0, 43613192.0, 31432488.0, 46366440.0, 62555952.0, 50673832.0, 52519176.0, 44282072.0, 60555152.0, 35701536.0, 42407488.0, 54356280.0, 54300872.0, 48021000.0, 47572800.0, 50116680.0, 40655656.0, 35097736.0, 45170920.0, 47093104.0, 46608528.0, 48149856.0, 63036096.0, 42411104.0, 40162168.0, 48318744.0, 50996496.0] , [-5351.087656114703, -5818.692698327083, -3968.600872433117, -5273.168475597448, -3626.313895174781, -4907.851864008534, -3591.107345761522, -3238.119720441175, -5026.851240520994, -3292.2915679533626, -3107.4613033308146, -3177.494796246703, -3729.7784242906914, -2855.920291049261, -3393.0468534261445, -2808.1796649441635, -5396.203613627399, -5869.01225569855, -5072.354306862431, -4409.6746684850405, -3347.7833019894906, -3972.9391374409706, -3324.403988782277, -3905.157322269898, -14620.65939126439, -4598.309041443185, -2691.4917856447155, -4171.239489535979, -3867.6887281518802, -4666.037417233393, -4307.37783140602, -2675.7553911301065, -3578.2633978138974, -4706.858013091434, -3555.6537733400755, -4198.965368537115, -3725.7323302803284, -3690.7159592199105, -3211.772079381167, -4354.257691834848, -3480.552710638391, -4579.365944961028, -3906.5694013944826, -2731.9468538260376, -2938.205955607554, -3487.7259789213604, -3894.4387855139785, -4325.228015441185, -3528.0558013938758, -3302.542196992824, -4120.780092831794, -3728.707186301257, -4200.482113599123, -3888.8589400188966, -3211.06446196251, -4790.073377972746, -3443.0283803156017, -4791.322269195185, -4511.209165444372, -4157.9506978865975, -3490.5321324037795, -4266.693400315794, -5803.392066826001, -3999.6493816456455, -3611.300818069498, -5956.523177059786, -3653.3835328991245, -4131.389049574728, -4589.185813878031, -4958.627787689996, -5196.707271181064, -3762.246842066015, -4072.5276993445073, -5613.290403067656, -6127.7215213825675, -5858.61536548686, -3535.199211842716, -4238.846929741444, -4668.804046593789, -4405.407793020787, -5415.3349749940435, -6137.980377584889, -3728.4101807546112, -5193.002646173356, -6650.681147315568, -5362.066667404688, -5266.912022030482, -4435.044980625535, -5892.631997680752, -3877.1151309549077, -4025.0812115665562, -6150.511082154769, -6440.817524073931, -5476.619089169415, -5462.02736626673, -5939.645493780756, -4858.595194998374, -4008.1818468621727, -5704.837314435076, -5498.915457167179, -5811.160436819563, -5386.734864403327, -6889.5673708819295, -5126.781831823989, -4882.657643230836, -5777.151288103828, -5774.327771318047]


    print("Number of samples:", len(result))
    # validate_reward(result, ep_r)
    plot_compare(result, ep_r, is_benchmark=True) 

    analyse.plot_smoothing(range(len(result)), result, "result")
    analyse.add_compare(is_benchmark=True)

    analyse.plot_smoothing(range(len(ep_r)), ep_r, "ep_reward")

    plt.show()
    return result, ep_r

def sentsize_analyse():
    sentsize

    sentsize = [e for e in sentsize if e != 0]
    import seaborn as sns 
    sns.distplot(np.log10(sentsize))
    plt.show()

def smooth_plot():
    x = np.arange(10)
    y = (x**2)
    res, _ = analyse_test()
    y = np.array(res)/1e7
    # print(y)

    DIR = "tf_log/test"
    import os 
    os
    import tensorflow as tf 
    a = tf.placeholder(dtype=tf.float32, shape=[])
    tf.summary.scalar("a", a)
    merged = tf.summary.merge_all()
    init = tf.global_variables_initializer()
    with tf.Session() as sess:
        summary = sess.run(init)
        writer = tf.summary.FileWriter(DIR, sess.graph)
        for i in range(y.shape[0]):
            s = sess.run(merged, feed_dict={a:y[i]})
            writer.add_summary(s, i)
    
def f():
    epsilon = 1
    for i in range(800):
        epsilon -= epsilon/70
    print(epsilon)
    
    from util import smooth_value
    res, _ = analyse_test()
    y = np.array(res)/1e7
    y_s = smooth_value(y, 0.9)
    import pandas as pd
    data = pd.DataFrame({
        "x": list(range(len(y))),
        "y": y,
        "y_s": y_s
    })
    # print(data)

    # import seaborn as sns; sns.set()
    # sns.lineplot(x="x", y="y", data=data, ci=0.5)
    # sns.lineplot(x="x", y="y_s", data=data)

    color = "royalblue"
    plt.plot(range(len(y)), y, linestyle="-", color=color, alpha=0.35)
    plt.plot(range(len(y)), y_s, linestyle="-", color=color)
    plt.show()

if __name__ == "__main__":
    pass
    analyse_test()
    # sentsize_analyse()
    # f()
    # smooth_plot()